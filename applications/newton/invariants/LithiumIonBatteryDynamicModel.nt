#
#	Authored 2021, Orestis Kaparounakis.
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.

include "NewtonBaseSignals.nt"

voltage : signal = 
{
	name		= "Volt" English;
	symbol		= V;
	derivation	= work / charge;
}

resistance : signal =
{
    name        = "Ohm" English;
    symbol      = Ohm;
    derivation  = voltage / current;
}

capacitance : signal =
{
    name        = "Farad" English;
    symbol      = F;
    derivation  = charge / voltage;
}

conductance : signal =
{
    name        = "Siemens" English;
    symbol      = G;
    derivation  = resistance**(-1);
}

elastance : signal =
{
    name        = "InverseFarad" English;
    symbol      = Fn1;
    derivation  = capacitance**(-1);
}

# P. Shrivastava, T. K. Soon, M. Y. I. B. Idris, and S. Mekhilef, “Overview of
# model-based online state-of-charge estimation using Kalman filter family for
# lithium-ion batteries,” Renewable and Sustainable Energy Reviews, vol. 113, p.
# 109233, Oct. 2019, doi: 10.1016/j.rser.2019.06.040.
# SimpleRintModelProcess : invariant ( theta_k : angle,
#                                      v_t_k   : voltage ) = 
# {
# #   OK. How do we get the SoC on the state variables?
#     theta_k ~ R,
#     v_t_k   ~ U_oc(SoC_k) - Ik*R
# }

voltage_


# Models from:

# R. Xiong, H. He, F. Sun, and K. Zhao, “Evaluation on State of Charge
# Estimation of Batteries With Adaptive Extended Kalman Filter by Experiment
# Approach,” IEEE Trans. Veh. Technol., vol. 62, no. 1, pp. 108–117, Jan. 2013,
# doi: 10.1109/TVT.2012.2222684.

# Section III.B.2, Equations 13, 14, 15, 16
TheveninModelWithLookupProcess : invariant (
                                            Uoc  : voltage,     # Battery OCV
                                            Up   : voltage,     # Polarization voltage
                                            Ut   : voltage,     # Battery terminal voltage
                                            i_Cp : elastance,   # Inverse of polarization capacitance
                                            i_Rp : conductance,  # Inverse of polarization resistance
                                            Ro   : resistance,     # Ohmic resistance
                                            # Control input
                                            IL   : current,   # Load current
                                            dt   : time
                                           ) = 
{
    Uoc  ~ Uoc,
    Ut   ~ Ut + (Uoc*i_Cp*i_Rp - Ut*i_Cp*i_Rp - (i_Cp*i_Rp*Ro + i_Cp)*IL - Ro*IL/dt)*dt,   # Also in Equation 5.
    Up   ~ Up + (i_Cp*IL - Up*i_Rp*i_Cp)*dt,   # Also in Equation 5.
    i_Cp ~ i_Cp,
    i_Rp ~ i_Rp,
    Ro   ~ Ro
}
# Section III.B.2, Equation 17
TheveninModelWithLookupMeasure : invariant (Ut : voltage) = 
{
    Ut ~ Ut
}

# TheveninModelProcess : invariant ( SoC  : dimensionless,    # State of Charge
#                                    h_i  : dimensionless,    # Coulomb efficiency
#                                    I_Lk : ampere,   # instantaneous load current (positive=discharge, negative=charge)
#                                    Ca   : coulomb   # present maximum available capacity
#                                  ) = 
# {
#     SoC ~ SoC - h_i*I_Lk/C_a
# }

# ekf_est : estimator (
#     process: TheveninModelWithLookupProcess(
#         Uoc
#     ),
#     measure: TheveninModelWithLookupMeasure(

#     )
# ) = {}
