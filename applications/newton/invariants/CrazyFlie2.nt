#
#	Authored 2019, Andrew Kadis
#
#	All rights reserved.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions
#	are met:
#
#	*	Redistributions of source code must retain the above
#		copyright notice, this list of conditions and the following
#		disclaimer.
#
#	*	Redistributions in binary form must reproduce the above
#		copyright notice, this list of conditions and the following
#		disclaimer in the documentation and/or other materials
#		provided with the distribution.
#
#	*	Neither the name of the author nor the names of its
#		contributors may be used to endorse or promote products
#		derived from this software without specific prior written
#		permission.
#
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#	POSSIBILITY OF SUCH DAMAGE.
#
#
#	Description: Invariants for the Crazyflie 2.0
#

include "NewtonBaseSignals.nt"

#torque : signal =
#{
#	derivation	= Newton * distance;
#}

#motor_constant : signal =
#{
#	derivation	= torque / (power ** 2);
#}

thrust: signal =
{
#	derivation	= Ampere * motor_constant;
	derivation	= force;
}

SamplingTime: constant = (5E-3) * s;

initialHeight	: constant = 10 * m;


# Properties
# Taken from Deimos/CrazyFlie/CrazyFlie_Modelling.ipynb on 7th Jan 2019
# SHA: 4357f8b7738df7fb3018faa914265263f96910f3
# Airframe
systemMass : constant = 27 * (1/1000) * kg;
# Motor
motorMass	  : constant = 2.7 * (1/1000) * kg;
motorVolume	  : constant = 0.0000006158 * vol;
motorDensity  : constant = 4384.881085 * rho;
# Motor Mount
mountMass	  : constant = 0.37 * (1/1000) * kg;
mountVolume	  : constant = 0.0000054000 * vol;
mountDensity  : constant = 946 * rho;
# Battery
batteryMass    : constant = 7.1 * (1/1000) * kg;
batteryVolume  : constant = 0.0000042000 * vol;
batteryDensity : constant = 1690.476190 * rho;
# Battery Holder
holderMass    : constant = 0.4 * (1/1000) * kg;
holderVolume  : constant = 0.0000031360 * vol;
holderDensity : constant = 95.238095 * rho;
# Avionics
avionicsMass : constant = 6.420 * (1/1000) * kg;
# Propeller
propellerMass : constant = 0.2 * rho;


CrazyFlieLift: invariant(
	x: thrust
) = {
	crazyFlieMass * kNewtonUnithave_AccelerationDueToGravity ~ x
}