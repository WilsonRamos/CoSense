Filter : module ()
{
        N : const 100;
        M : const 5000;
        delayLow : const 91;
        lenLow : const 183;
        lowPassFilterOrder61 : function (input : array [100] of float64) -> (output : array [100] of float64);
        lowPassFilterOrder183 : function (input : array [5000] of float64) -> (output : array [5000] of float64);
        readFloat64FromCSV : function (nil) -> (x : float64);
        printFloat64 : function (x : float64) -> (y : int32);
        init : function (nil) -> (ret : int32);
}

lowPassFilterOrder61 : function (input : array [100] of float64) -> (output : array [100] of float64) =
{
        # array [62] of float64;
        coeff := array of {float64 0.000227909254804652, 0.000433867017147087, 0.000780047144163945, 0.001226644358132, 0.00173493436088177,
                0.00223040625529593, 0.00260254806414593, 0.00271072221695493, 0.00239864483731844, 0.00151692430516425, -4.86575750771237E-5,
                -0.00234573131843931, -0.00532536253847712, -0.00881938374990202, -0.0125298792794148, -0.0160349103690561, -0.018813405060611,
                -0.0202891356213464, -0.0198903644123104, -0.0171195614002299, -0.0116253062362801, -0.00326657439016242, 0.00784023827215585,
                0.0212993822122494, 0.0364444562113838, 0.0523797566570426, 0.0680515698623637, 0.0823424873483821, 0.09417875558847,
                0.102638312576606, 0.107046310421825, 0.107046310421825, 0.102638312576606, 0.09417875558847, 0.0823424873483821, 
                0.0680515698623637, 0.0523797566570426, 0.0364444562113838, 0.0212993822122494, 0.00784023827215585, -0.00326657439016242,
                -0.0116253062362801, -0.0171195614002299, -0.0198903644123104, -0.0202891356213464, -0.018813405060611, -0.0160349103690561,
                -0.0125298792794148, -0.00881938374990202, -0.00532536253847712, -0.00234573131843931, -4.86575750771237E-5, 0.00151692430516425,
                0.00239864483731844, 0.00271072221695493, 0.00260254806414593, 0.00223040625529593, 0.00173493436088177, 0.001226644358132,
                0.000780047144163945, 0.000433867017147087, 0.000227909254804652};

        window := array [60] of {float64 0.0, * => 0.0};

        y : array [100] of float64;
        x : array [100] of float64;

        acc1, acc2 : float64;

        i : int32;

        iterate
        {
                true =>
                {
                        x = <- input;
                        # Consume delay line and beginning of input samples
                        sequence(i = 0; i < 61; i += 1)
                        {
                                acc1 = 0.0;
                                sequence(j := int32 0; j < (i + 1); j += 1)
                                {
                                        acc2 = x[i-j] * coeff[j];
                                        acc1 += acc2;
                                };

                                sequence(j = 0; j < (61 - i); j += 1)
                                {
                                        acc2 = window[j] * coeff[i + j + 1];
                                        acc1 += acc2;
                                };

                                y[i] = acc1;
                        };
                        
                        # Consume remaining input samples
                        sequence(i = 0; i < (N - 61); i += 1)
                        {
                                acc1 = 0.0;
                                sequence(j := int32 0; j < 62; j += 1)
                                {
                                        acc2 = x[i-j + 61] * coeff[j];
                                        acc1 += acc2;
                                };

                                y[i + 61]= acc1;
                        };

                        # Update delay line for next frame
                        sequence(i = 0; i < 61; i += 1)
                        {
                                window[60-i] = x[i + N - 61];
                        };

                        output <-= y;
                }
        };
}

lowPassFilterOrder183 : function (input : array [5000] of float64) -> (output : array [5000] of float64) =
{
        coeffLow := array of {float64 0.000220, 0.000580, 0.001199, 0.002057, 0.003064, 0.004039, 0.004736, 0.004906, 0.004369,
        0.003091, 0.001230, -0.000873, -0.002771, -0.004021, -0.004324, -0.003634, -0.002187, -0.000455, 0.000996, 0.001688,
        0.001391, 0.000217, -0.001410, -0.002888, -0.003654, -0.003390, -0.002154, -0.000378, 0.001280, 0.002174, 0.001923, 0.000571,
        -0.001402, -0.003245, -0.004210, -0.003854, -0.002229, 0.000103, 0.002260, 0.003370, 0.002923, 0.000994, -0.001739, -0.004229,
        -0.005449, -0.004811, -0.002434, 0.000856, 0.003802, 0.005190, 0.004345, 0.001442, -0.002498, -0.005955, -0.007486, -0.006312,
        -0.002689, 0.002116, 0.006248, 0.007973, 0.006386, 0.001847, -0.004052, -0.009025, -0.010952, -0.008757, -0.002936, 0.004490,
        0.010644, 0.012868, 0.009822, 0.002167, -0.007485, -0.015398, -0.018080, -0.013720, -0.003126, 0.010240, 0.021267, 0.024964,
        0.018440, 0.002373, -0.018608, -0.036909, -0.044107, -0.033650, -0.003231, 0.043933, 0.099453, 0.151723, 0.188960, 0.202443,
        0.188960, 0.151723, 0.099453, 0.043933, -0.003231, -0.033650, -0.044107, -0.036909, -0.018608, 0.002373, 0.018440, 0.024964,
        0.021267, 0.010240, -0.003126, -0.013720, -0.018080, -0.015398, -0.007485, 0.002167, 0.009822, 0.012868, 0.010644, 0.004490,
        -0.002936, -0.008757, -0.010952, -0.009025, -0.004052, 0.001847, 0.006386, 0.007973, 0.006248, 0.002116, -0.002689, -0.006312,
        -0.007486, -0.005955, -0.002498, 0.001442, 0.004345, 0.005190, 0.003802, 0.000856, -0.002434, -0.004811, -0.005449, -0.004229,
        -0.001739, 0.000994, 0.002923, 0.003370, 0.002260, 0.000103, -0.002229, -0.003854, -0.004210, -0.003245, -0.001402, 0.000571,
        0.001923, 0.002174, 0.001280, -0.000378, -0.002154, -0.003390, -0.003654, -0.002888, -0.001410, 0.000217, 0.001391, 0.001688,
        0.000996, -0.000455, -0.002187, -0.003634, -0.004324, -0.004021, -0.002771, -0.000873, 0.001230, 0.003091, 0.004369, 0.004906,
        0.004736, 0.004039, 0.003064, 0.002057, 0.001199, 0.000580, 0.000220};

        ext_sig_low : array [5091] of float64;
        y_low_ext : array [5091] of float64;
        sig_filt : array [5091] of float64;
        outputArr : array [5000] of float64;

        i : int32;
        sequence(i = 0; i < (M + delayLow); i += 1)
        {
                ext_sig_low[i] = input[i];
        };

        sequence(i = M; i < (M + delayLow); i += 1)
        {
                ext_sig_low[i] = 0.0;
        };

        n : int32;
        sequence(n = 0; n < (M + delayLow); n += 1)
        {
                y_low_ext[n] = 0.0;
                sequence(i = 0; i < lenLow; i += 1)
                {
                        matchseq
                        {
                                n - i >= 0 =>
                                {
                                        y_low_ext[n] += coeffLow[i] * ext_sig_low[n - i];
                                }
                        };
                };
        };

        sequence(i = delayLow; i < (delayLow + M); i += 1)
        {
                sig_filt[i - delayLow] = y_low_ext[i];
        };

        sequence(i = 0; i < M; i += 1)
        {
                outputArr[i] = sig_filt[i];
        };

        return (output : outputArr);
}


init : function (nil) -> (ret : int32) =
{
        i,k : int32;
        #inputArr : array [100] of float64;
        inputArr2 : array [5000] of float64;


        #firChan := load Filter->lowPassFilterOrder61 (path Filter);
        
        #sequence(k = 0; k < 5000; k += N)
        #{
        #        sequence(i = 0; i < N; i += 1)
        #        {
        #                inputArr[i] = readFloat64FromCSV();
        #        };

        #        firChan <-= inputArr;
        #        outputArr := <-firChan;

        #        sequence(i = 0; i < N; i += 1)
        #        {
        #                nil = printFloat64(x : outputArr[i]);
        #        };
        #};

        sequence(k = 0; k < M; k += 1)
        {
                inputArr2[k] = readFloat64FromCSV();
        };
        
        outputArr2 := lowPassFilterOrder183(input : inputArr2);

        sequence(i = 0; i < M; i += 1)
        {
                nil = printFloat64(x : outputArr2[i]);
        };
        return (ret : 0);
}