/*
	Authored 2015. Phillip Stanley-Marbell.

	All rights reserved.

	Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions
	are met:

	*	Redistributions of source code must retain the above
		copyright notice, this list of conditions and the following
		disclaimer.

	*	Redistributions in binary form must reproduce the above
		copyright notice, this list of conditions and the following
		disclaimer in the documentation and/or other materials
		provided with the distribution.

	*	Neither the name of the author nor the names of its
		contributors may be used to endorse or promote products
		derived from this software without specific prior written
		permission.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
	CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	POSSIBILITY OF SUCH DAMAGE.
*/



/*
 *	Google Protocol Buffer Specification for Noisy's data structures.
 *
 *	We use this, e.g., to save/restore the IR and Symbol Table to
 *	iles.
 */



package Noisy;



message NoisySourceInfo
{
	/*
	 *	Not yet used; for when we implement includes, this will be
	 *	the 'genealogy' of includes leading to this token.
	 */
	repeated string			genealogy	= 1;
	
	required string			fileName	= 2;
	required int64			lineNumber	= 3;
	required int64			columnNumber	= 4;
	required int64			length		= 5;
}


message NoisyIrNode
{
	required int64			type		= 1;

	/*
	 *	Syntactic (AST) information.
	 */
	optional string			tokenString	= 2;
	optional NoisySourceInfo	sourceInfo	= 3;
	optional NoisySymbol		symbol		= 7;

	/*
	 *	Used for coloring the IR tree, e.g., during Graphviz/dot
	 *	generation.
	 */
	required int64			nodeColor	= 8;
}




message NoisyToken
{
	required int64			type		= 1;
	optional string			identifier	= 2;
	optional int64			integerConst	= 3;
	optional double			realConst	= 4;
	optional string			stringConst	= 5;
	required NoisySourceInfo	sourceInfo	= 6;
}


message NoisyScope
{
	/*
	 *	For named scopes (at the moment, only Progtypes).
	 */
	required string			identifier	= 1;

	/*
	 *	Hierarchy. The firstChild is used to access its siblings
	 *	via firstChild->next.
	 */
	repeated NoisyScope		childScopes	= 2;

	/*
	 *	Symbols in this scope. The list of symbols is accesed
	 *	via firstSymbol->next.
	 */
	repeated NoisySymbol		symbols		= 3;

	/*
	 *	Where in source scope begins and ends
	 */
	required NoisySourceInfo	begin		= 4;
	required NoisySourceInfo	end		= 5;
}


message NoisySymbol
{
	required string			identifier	= 1;

	/*
	 *	This field is duplicated in the AST node, since only
	 *	identifiers get into the symbol table:
	 */
	required NoisySourceInfo	sourceInfo	= 2;

	/*
	 *	Declaration, type definition, use, etc. (kNoisySymbolTypeXXX)
	 */
	required int64 			symbolType	= 3;

	/*
	 *	Scope within which sym appears.
	 */
	required NoisyScope		scope		= 4;

	/*
	 *	If an identifier use, definition's Sym, if any.
	 */
	optional NoisySymbol		definition	= 5;

	/*
	 *	Subtree in AST that represents typeexpr.
	 */
	optional NoisyIrNode		typeTree	= 6;

	/*
	 *	If an I_CONST, its value.
	 */
	optional int64			intConst	= 7;
	optional double			realConst	= 8;
	optional string			stringConst	= 9;
}


message NoisyState
{
	repeated NoisyIrNode	noisyIrRoot		= 1;
	repeated NoisyScope	noisyIrTopScope		= 2;
}